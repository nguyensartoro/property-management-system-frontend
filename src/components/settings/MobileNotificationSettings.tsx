import React, { useState, useEffect } from 'react';\nimport {\n  Bell,\n  BellOff,\n  Volume2,\n  VolumeX,\n  Vibrate,\n  Moon,\n  Sun,\n  Clock,\n  Settings,\n  Check,\n  X,\n  AlertCircle,\n  Smartphone,\n  MessageSquare,\n  DollarSign,\n  Wrench,\n  Megaphone,\n  Shield,\n} from 'lucide-react';\nimport { pushNotifications, NotificationTemplates } from '../../utils/push-notifications';\nimport { MobileInput, MobileCheckbox, MobileSelect } from '../forms/MobileOptimizedForms';\nimport { TouchButton } from '../ui/TouchFriendlyComponents';\n\ninterface NotificationSettings {\n  enabled: boolean;\n  types: {\n    payments: boolean;\n    maintenance: boolean;\n    messages: boolean;\n    announcements: boolean;\n    emergencies: boolean;\n  };\n  quietHours: {\n    enabled: boolean;\n    start: string;\n    end: string;\n  };\n  sound: boolean;\n  vibration: boolean;\n}\n\ninterface MobileNotificationSettingsProps {\n  onClose?: () => void;\n  className?: string;\n}\n\nexport const MobileNotificationSettings: React.FC<MobileNotificationSettingsProps> = ({\n  onClose,\n  className = '',\n}) => {\n  const [settings, setSettings] = useState<NotificationSettings>({\n    enabled: true,\n    types: {\n      payments: true,\n      maintenance: true,\n      messages: true,\n      announcements: true,\n      emergencies: true,\n    },\n    quietHours: {\n      enabled: false,\n      start: '22:00',\n      end: '08:00',\n    },\n    sound: true,\n    vibration: true,\n  });\n\n  const [permission, setPermission] = useState<NotificationPermission>('default');\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [isSupported, setIsSupported] = useState(false);\n\n  useEffect(() => {\n    // Check if notifications are supported\n    setIsSupported(pushNotifications.isSupported());\n    \n    // Load current settings\n    const currentSettings = pushNotifications.getSettings();\n    setSettings(currentSettings);\n    \n    // Check permission status\n    setPermission(pushNotifications.getPermissionStatus());\n    \n    // Check subscription status\n    checkSubscriptionStatus();\n  }, []);\n\n  const checkSubscriptionStatus = async () => {\n    try {\n      const subscription = await pushNotifications.getSubscription();\n      setIsSubscribed(!!subscription);\n    } catch (error) {\n      console.error('Error checking subscription status:', error);\n    }\n  };\n\n  const handleEnableNotifications = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const newPermission = await pushNotifications.requestPermission();\n      setPermission(newPermission);\n      \n      if (newPermission === 'granted') {\n        await pushNotifications.subscribeToPush();\n        setIsSubscribed(true);\n        setSettings(prev => ({ ...prev, enabled: true }));\n        setSuccess('Notifications enabled successfully!');\n      } else {\n        setError('Notification permission denied. Please enable in browser settings.');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to enable notifications');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDisableNotifications = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await pushNotifications.unsubscribeFromPush();\n      setIsSubscribed(false);\n      setSettings(prev => ({ ...prev, enabled: false }));\n      setSuccess('Notifications disabled successfully!');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to disable notifications');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSettingsChange = (newSettings: Partial<NotificationSettings>) => {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    pushNotifications.updateSettings(updatedSettings);\n    setSuccess('Settings updated successfully!');\n    \n    // Clear success message after 3 seconds\n    setTimeout(() => setSuccess(null), 3000);\n  };\n\n  const handleTestNotification = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await pushNotifications.testNotification();\n      setSuccess('Test notification sent!');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to send test notification');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTestSpecificNotification = async (type: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      let notification;\n      \n      switch (type) {\n        case 'payment':\n          notification = NotificationTemplates.paymentReminder(1200, 'March 1, 2024');\n          break;\n        case 'maintenance':\n          notification = NotificationTemplates.maintenanceUpdate('REQ-001', 'In Progress');\n          break;\n        case 'message':\n          notification = NotificationTemplates.newMessage('Property Manager', 'Your lease renewal is ready for review.');\n          break;\n        case 'announcement':\n          notification = NotificationTemplates.announcement('Building Maintenance', 'Scheduled maintenance on March 15th from 9 AM to 5 PM.');\n          break;\n        case 'emergency':\n          notification = NotificationTemplates.emergencyAlert('Water main break in building. Please avoid basement area.');\n          break;\n        default:\n          throw new Error('Unknown notification type');\n      }\n      \n      await pushNotifications.showNotification(notification);\n      setSuccess(`Test ${type} notification sent!`);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : `Failed to send test ${type} notification`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearMessages = () => {\n    setError(null);\n    setSuccess(null);\n  };\n\n  if (!isSupported) {\n    return (\n      <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>\n        <div className=\"text-center\">\n          <BellOff size={48} className=\"mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Notifications Not Supported\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Your browser or device doesn't support push notifications.\n          </p>\n          {onClose && (\n            <TouchButton onClick={onClose} variant=\"primary\">\n              Close\n            </TouchButton>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow-lg max-h-screen overflow-y-auto ${className}`}>\n      {/* Header */}\n      <div className=\"sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n          <Bell size={24} className=\"mr-2\" />\n          Notification Settings\n        </h2>\n        {onClose && (\n          <TouchButton onClick={onClose} variant=\"ghost\" size=\"sm\">\n            <X size={20} />\n          </TouchButton>\n        )}\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Status Messages */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 flex items-start\">\n            <AlertCircle size={20} className=\"text-red-500 mr-3 mt-0.5 flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <p className=\"text-red-800\">{error}</p>\n              <button\n                onClick={clearMessages}\n                className=\"text-red-600 hover:text-red-800 text-sm mt-1 underline\"\n              >\n                Dismiss\n              </button>\n            </div>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 flex items-start\">\n            <Check size={20} className=\"text-green-500 mr-3 mt-0.5 flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <p className=\"text-green-800\">{success}</p>\n              <button\n                onClick={clearMessages}\n                className=\"text-green-600 hover:text-green-800 text-sm mt-1 underline\"\n              >\n                Dismiss\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Main Toggle */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <Smartphone size={24} className=\"text-blue-500 mr-3\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  Push Notifications\n                </h3>\n                <p className=\"text-sm text-gray-600\">\n                  Status: {permission === 'granted' ? 'Enabled' : permission === 'denied' ? 'Blocked' : 'Not Set'}\n                </p>\n              </div>\n            </div>\n            \n            {permission === 'granted' && isSubscribed ? (\n              <TouchButton\n                onClick={handleDisableNotifications}\n                disabled={isLoading}\n                variant=\"outline\"\n                className=\"text-red-600 border-red-600 hover:bg-red-50\"\n              >\n                {isLoading ? 'Disabling...' : 'Disable'}\n              </TouchButton>\n            ) : (\n              <TouchButton\n                onClick={handleEnableNotifications}\n                disabled={isLoading}\n                variant=\"primary\"\n              >\n                {isLoading ? 'Enabling...' : 'Enable'}\n              </TouchButton>\n            )}\n          </div>\n          \n          {permission === 'denied' && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded p-3\">\n              <p className=\"text-yellow-800 text-sm\">\n                Notifications are blocked. Please enable them in your browser settings and refresh the page.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Notification Types */}\n        {settings.enabled && isSubscribed && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Settings size={20} className=\"mr-2\" />\n              Notification Types\n            </h3>\n            \n            <div className=\"space-y-3\">\n              <MobileCheckbox\n                label=\"Payment Reminders\"\n                description=\"Get notified about upcoming and overdue payments\"\n                checked={settings.types.payments}\n                onChange={(checked) => handleSettingsChange({\n                  types: { ...settings.types, payments: checked }\n                })}\n              />\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <MobileCheckbox\n                    label=\"Maintenance Updates\"\n                    description=\"Get notified about maintenance request status changes\"\n                    checked={settings.types.maintenance}\n                    onChange={(checked) => handleSettingsChange({\n                      types: { ...settings.types, maintenance: checked }\n                    })}\n                  />\n                </div>\n                {settings.types.maintenance && (\n                  <TouchButton\n                    onClick={() => handleTestSpecificNotification('maintenance')}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"ml-2\"\n                  >\n                    <Wrench size={16} />\n                  </TouchButton>\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <MobileCheckbox\n                    label=\"Messages\"\n                    description=\"Get notified about new messages from property management\"\n                    checked={settings.types.messages}\n                    onChange={(checked) => handleSettingsChange({\n                      types: { ...settings.types, messages: checked }\n                    })}\n                  />\n                </div>\n                {settings.types.messages && (\n                  <TouchButton\n                    onClick={() => handleTestSpecificNotification('message')}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"ml-2\"\n                  >\n                    <MessageSquare size={16} />\n                  </TouchButton>\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <MobileCheckbox\n                    label=\"Announcements\"\n                    description=\"Get notified about building announcements and updates\"\n                    checked={settings.types.announcements}\n                    onChange={(checked) => handleSettingsChange({\n                      types: { ...settings.types, announcements: checked }\n                    })}\n                  />\n                </div>\n                {settings.types.announcements && (\n                  <TouchButton\n                    onClick={() => handleTestSpecificNotification('announcement')}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"ml-2\"\n                  >\n                    <Megaphone size={16} />\n                  </TouchButton>\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <MobileCheckbox\n                    label=\"Emergency Alerts\"\n                    description=\"Get notified about emergency situations (always enabled)\"\n                    checked={settings.types.emergencies}\n                    onChange={(checked) => handleSettingsChange({\n                      types: { ...settings.types, emergencies: checked }\n                    })}\n                    disabled={true}\n                  />\n                </div>\n                <TouchButton\n                  onClick={() => handleTestSpecificNotification('emergency')}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"ml-2\"\n                >\n                  <Shield size={16} />\n                </TouchButton>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Sound and Vibration */}\n        {settings.enabled && isSubscribed && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Alerts</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <MobileCheckbox\n                  label=\"Sound\"\n                  description=\"Play notification sounds\"\n                  checked={settings.sound}\n                  onChange={(sound) => handleSettingsChange({ sound })}\n                />\n                <div className=\"mt-2 flex justify-center\">\n                  {settings.sound ? (\n                    <Volume2 size={24} className=\"text-blue-500\" />\n                  ) : (\n                    <VolumeX size={24} className=\"text-gray-400\" />\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <MobileCheckbox\n                  label=\"Vibration\"\n                  description=\"Vibrate on notifications\"\n                  checked={settings.vibration}\n                  onChange={(vibration) => handleSettingsChange({ vibration })}\n                />\n                <div className=\"mt-2 flex justify-center\">\n                  <Vibrate size={24} className={settings.vibration ? 'text-blue-500' : 'text-gray-400'} />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Quiet Hours */}\n        {settings.enabled && isSubscribed && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Moon size={20} className=\"mr-2\" />\n              Quiet Hours\n            </h3>\n            \n            <MobileCheckbox\n              label=\"Enable Quiet Hours\"\n              description=\"Silence notifications during specified hours\"\n              checked={settings.quietHours.enabled}\n              onChange={(enabled) => handleSettingsChange({\n                quietHours: { ...settings.quietHours, enabled }\n              })}\n            />\n            \n            {settings.quietHours.enabled && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <MobileInput\n                  label=\"Start Time\"\n                  type=\"time\"\n                  value={settings.quietHours.start}\n                  onChange={(start) => handleSettingsChange({\n                    quietHours: { ...settings.quietHours, start }\n                  })}\n                  icon={<Sun size={20} />}\n                />\n                \n                <MobileInput\n                  label=\"End Time\"\n                  type=\"time\"\n                  value={settings.quietHours.end}\n                  onChange={(end) => handleSettingsChange({\n                    quietHours: { ...settings.quietHours, end }\n                  })}\n                  icon={<Moon size={20} />}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Test Notifications */}\n        {settings.enabled && isSubscribed && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Test Notifications</h3>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <TouchButton\n                onClick={() => handleTestSpecificNotification('payment')}\n                disabled={isLoading || !settings.types.payments}\n                variant=\"outline\"\n                className=\"flex items-center justify-center\"\n              >\n                <DollarSign size={16} className=\"mr-2\" />\n                Payment\n              </TouchButton>\n              \n              <TouchButton\n                onClick={() => handleTestSpecificNotification('maintenance')}\n                disabled={isLoading || !settings.types.maintenance}\n                variant=\"outline\"\n                className=\"flex items-center justify-center\"\n              >\n                <Wrench size={16} className=\"mr-2\" />\n                Maintenance\n              </TouchButton>\n              \n              <TouchButton\n                onClick={() => handleTestSpecificNotification('message')}\n                disabled={isLoading || !settings.types.messages}\n                variant=\"outline\"\n                className=\"flex items-center justify-center\"\n              >\n                <MessageSquare size={16} className=\"mr-2\" />\n                Message\n              </TouchButton>\n              \n              <TouchButton\n                onClick={() => handleTestSpecificNotification('announcement')}\n                disabled={isLoading || !settings.types.announcements}\n                variant=\"outline\"\n                className=\"flex items-center justify-center\"\n              >\n                <Megaphone size={16} className=\"mr-2\" />\n                Announcement\n              </TouchButton>\n            </div>\n            \n            <TouchButton\n              onClick={handleTestNotification}\n              disabled={isLoading}\n              variant=\"primary\"\n              className=\"w-full\"\n            >\n              {isLoading ? 'Sending...' : 'Send Test Notification'}\n            </TouchButton>\n          </div>\n        )}\n\n        {/* Help Text */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-blue-900 mb-2\">About Notifications</h4>\n          <ul className=\"text-blue-800 text-sm space-y-1\">\n            <li>• Notifications help you stay updated on important property matters</li>\n            <li>• Emergency alerts cannot be disabled for safety reasons</li>\n            <li>• You can customize which types of notifications you receive</li>\n            <li>• Quiet hours will silence non-emergency notifications</li>\n            <li>• You can disable notifications at any time</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Hook for managing notification settings\nexport const useNotificationSettings = () => {\n  const [settings, setSettings] = useState<NotificationSettings | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    try {\n      const currentSettings = pushNotifications.getSettings();\n      setSettings(currentSettings);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load settings');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const updateSettings = (newSettings: Partial<NotificationSettings>) => {\n    if (!settings) return;\n    \n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    pushNotifications.updateSettings(updatedSettings);\n  };\n\n  const requestPermission = async () => {\n    try {\n      setIsLoading(true);\n      const permission = await pushNotifications.requestPermission();\n      return permission;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to request permission');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    settings,\n    isLoading,\n    error,\n    updateSettings,\n    requestPermission,\n  };\n};\n"