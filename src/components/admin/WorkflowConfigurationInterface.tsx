import React, { useState, useEffect } from 'react';\nimport {\n  Play,\n  Pause,\n  Settings,\n  Edit,\n  Trash2,\n  Copy,\n  Download,\n  Upload,\n  Plus,\n  Search,\n  Filter,\n  MoreVertical,\n  CheckCircle,\n  XCircle,\n  Clock,\n  AlertTriangle,\n  Activity,\n  BarChart3,\n  Users,\n  Calendar,\n  FileText,\n  Zap,\n} from 'lucide-react';\n\ninterface WorkflowDefinition {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  isActive: boolean;\n  category: string;\n  tags: string[];\n  steps: WorkflowStep[];\n  triggers: WorkflowTrigger[];\n  variables: WorkflowVariable[];\n  metadata: {\n    businessImpact: 'low' | 'medium' | 'high' | 'critical';\n    estimatedDuration: string;\n    lastModified: string;\n    createdBy: string;\n  };\n  statistics: {\n    totalExecutions: number;\n    successRate: number;\n    averageDuration: number;\n    lastExecution?: string;\n  };\n}\n\ninterface WorkflowStep {\n  id: string;\n  name: string;\n  type: string;\n  config: Record<string, any>;\n  nextSteps: string[];\n  errorHandling: {\n    strategy: string;\n    maxRetries?: number;\n  };\n}\n\ninterface WorkflowTrigger {\n  id: string;\n  type: string;\n  config: Record<string, any>;\n}\n\ninterface WorkflowVariable {\n  name: string;\n  type: string;\n  required: boolean;\n  defaultValue?: any;\n  description?: string;\n}\n\ninterface WorkflowExecution {\n  id: string;\n  workflowId: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  startedAt: string;\n  completedAt?: string;\n  currentStep?: string;\n  progress: number;\n  error?: string;\n}\n\nexport const WorkflowConfigurationInterface: React.FC = () => {\n  const [workflows, setWorkflows] = useState<WorkflowDefinition[]>([]);\n  const [executions, setExecutions] = useState<WorkflowExecution[]>([]);\n  const [selectedWorkflow, setSelectedWorkflow] = useState<WorkflowDefinition | null>(null);\n  const [activeTab, setActiveTab] = useState<'workflows' | 'executions' | 'templates' | 'analytics'>('workflows');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  useEffect(() => {\n    fetchWorkflows();\n    fetchExecutions();\n  }, []);\n\n  const fetchWorkflows = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/v1/workflows');\n      if (!response.ok) throw new Error('Failed to fetch workflows');\n      const data = await response.json();\n      setWorkflows(data.workflows || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch workflows');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchExecutions = async () => {\n    try {\n      const response = await fetch('/api/v1/workflows/executions');\n      if (!response.ok) throw new Error('Failed to fetch executions');\n      const data = await response.json();\n      setExecutions(data.executions || []);\n    } catch (err) {\n      console.error('Failed to fetch executions:', err);\n    }\n  };\n\n  const handleToggleWorkflow = async (workflowId: string, isActive: boolean) => {\n    try {\n      const response = await fetch(`/api/v1/workflows/${workflowId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isActive: !isActive }),\n      });\n      \n      if (!response.ok) throw new Error('Failed to toggle workflow');\n      \n      setWorkflows(prev => prev.map(w => \n        w.id === workflowId ? { ...w, isActive: !isActive } : w\n      ));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to toggle workflow');\n    }\n  };\n\n  const handleDeleteWorkflow = async (workflowId: string) => {\n    if (!confirm('Are you sure you want to delete this workflow?')) return;\n    \n    try {\n      const response = await fetch(`/api/v1/workflows/${workflowId}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) throw new Error('Failed to delete workflow');\n      \n      setWorkflows(prev => prev.filter(w => w.id !== workflowId));\n      if (selectedWorkflow?.id === workflowId) {\n        setSelectedWorkflow(null);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to delete workflow');\n    }\n  };\n\n  const handleCloneWorkflow = async (workflow: WorkflowDefinition) => {\n    try {\n      const response = await fetch(`/api/v1/workflows/${workflow.id}/clone`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name: `${workflow.name} (Copy)` }),\n      });\n      \n      if (!response.ok) throw new Error('Failed to clone workflow');\n      \n      const clonedWorkflow = await response.json();\n      setWorkflows(prev => [...prev, clonedWorkflow]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to clone workflow');\n    }\n  };\n\n  const handleExecuteWorkflow = async (workflowId: string) => {\n    try {\n      const response = await fetch(`/api/v1/workflows/${workflowId}/execute`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ context: {} }),\n      });\n      \n      if (!response.ok) throw new Error('Failed to execute workflow');\n      \n      const execution = await response.json();\n      setExecutions(prev => [execution, ...prev]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to execute workflow');\n    }\n  };\n\n  const filteredWorkflows = workflows.filter(workflow => {\n    const matchesSearch = workflow.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         workflow.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === 'all' || workflow.category === categoryFilter;\n    const matchesStatus = statusFilter === 'all' || \n                         (statusFilter === 'active' && workflow.isActive) ||\n                         (statusFilter === 'inactive' && !workflow.isActive);\n    \n    return matchesSearch && matchesCategory && matchesStatus;\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'running':\n        return <Clock className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-4 w-4 text-gray-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getBusinessImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'critical':\n        return 'bg-red-100 text-red-800';\n      case 'high':\n        return 'bg-orange-100 text-orange-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Workflow Management</h1>\n            <p className=\"text-gray-600 mt-2\">Configure and monitor automated business workflows</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Workflow\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Alert */}\n      {error && (\n        <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4 flex items-center\">\n          <AlertTriangle className=\"h-5 w-5 text-red-500 mr-3\" />\n          <span className=\"text-red-800\">{error}</span>\n          <button\n            onClick={() => setError(null)}\n            className=\"ml-auto text-red-500 hover:text-red-700\"\n          >\n            <XCircle className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200 mb-6\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {[\n            { id: 'workflows', label: 'Workflows', icon: Settings },\n            { id: 'executions', label: 'Executions', icon: Activity },\n            { id: 'templates', label: 'Templates', icon: FileText },\n            { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n          ].map(tab => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <Icon className=\"h-4 w-4 mr-2\" />\n                {tab.label}\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Workflows Tab */}\n      {activeTab === 'workflows' && (\n        <div>\n          {/* Filters */}\n          <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search workflows...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-3\">\n              <select\n                value={categoryFilter}\n                onChange={(e) => setCategoryFilter(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Categories</option>\n                <option value=\"tenant_management\">Tenant Management</option>\n                <option value=\"property_management\">Property Management</option>\n                <option value=\"payment_management\">Payment Management</option>\n                <option value=\"maintenance_management\">Maintenance Management</option>\n                <option value=\"marketing\">Marketing</option>\n              </select>\n              <select\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Workflows Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredWorkflows.map(workflow => (\n              <div\n                key={workflow.id}\n                className=\"bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow\"\n              >\n                <div className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                        {workflow.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {workflow.description}\n                      </p>\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          getBusinessImpactColor(workflow.metadata.businessImpact)\n                        }`}>\n                          {workflow.metadata.businessImpact}\n                        </span>\n                        <span className=\"text-xs text-gray-500\">\n                          v{workflow.version}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <button\n                        onClick={() => handleToggleWorkflow(workflow.id, workflow.isActive)}\n                        className={`p-1 rounded ${\n                          workflow.isActive\n                            ? 'text-green-600 hover:bg-green-50'\n                            : 'text-gray-400 hover:bg-gray-50'\n                        }`}\n                        title={workflow.isActive ? 'Deactivate' : 'Activate'}\n                      >\n                        {workflow.isActive ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n                      </button>\n                      <div className=\"relative group\">\n                        <button className=\"p-1 rounded hover:bg-gray-50\">\n                          <MoreVertical className=\"h-4 w-4 text-gray-400\" />\n                        </button>\n                        <div className=\"absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-10 hidden group-hover:block\">\n                          <button\n                            onClick={() => {\n                              setSelectedWorkflow(workflow);\n                              setShowEditModal(true);\n                            }}\n                            className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center\"\n                          >\n                            <Edit className=\"h-4 w-4 mr-2\" />\n                            Edit\n                          </button>\n                          <button\n                            onClick={() => handleCloneWorkflow(workflow)}\n                            className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center\"\n                          >\n                            <Copy className=\"h-4 w-4 mr-2\" />\n                            Clone\n                          </button>\n                          <button\n                            onClick={() => handleExecuteWorkflow(workflow.id)}\n                            className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center\"\n                          >\n                            <Zap className=\"h-4 w-4 mr-2\" />\n                            Execute\n                          </button>\n                          <hr className=\"my-1\" />\n                          <button\n                            onClick={() => handleDeleteWorkflow(workflow.id)}\n                            className=\"w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Delete\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Statistics */}\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900\">\n                        {workflow.statistics.totalExecutions}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Executions</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {workflow.statistics.successRate.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Success Rate</div>\n                    </div>\n                  </div>\n\n                  {/* Tags */}\n                  <div className=\"flex flex-wrap gap-1 mb-4\">\n                    {workflow.tags.slice(0, 3).map(tag => (\n                      <span\n                        key={tag}\n                        className=\"px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-full\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {workflow.tags.length > 3 && (\n                      <span className=\"px-2 py-1 bg-gray-50 text-gray-500 text-xs rounded-full\">\n                        +{workflow.tags.length - 3}\n                      </span>\n                    )}\n                  </div>\n\n                  {/* Footer */}\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>{workflow.steps.length} steps</span>\n                    <span>{workflow.metadata.estimatedDuration}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {filteredWorkflows.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Settings className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No workflows found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                {searchTerm || categoryFilter !== 'all' || statusFilter !== 'all'\n                  ? 'Try adjusting your filters'\n                  : 'Create your first workflow to get started'}\n              </p>\n              <button\n                onClick={() => setShowCreateModal(true)}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                Create Workflow\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Executions Tab */}\n      {activeTab === 'executions' && (\n        <div>\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Recent Executions</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Workflow\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Progress\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Started\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Duration\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {executions.map(execution => {\n                    const workflow = workflows.find(w => w.id === execution.workflowId);\n                    const duration = execution.completedAt\n                      ? Math.round((new Date(execution.completedAt).getTime() - new Date(execution.startedAt).getTime()) / 1000)\n                      : Math.round((Date.now() - new Date(execution.startedAt).getTime()) / 1000);\n                    \n                    return (\n                      <tr key={execution.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              {workflow?.name || 'Unknown Workflow'}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {execution.id}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            {getStatusIcon(execution.status)}\n                            <span className=\"ml-2 text-sm text-gray-900 capitalize\">\n                              {execution.status}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div\n                              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                              style={{ width: `${execution.progress}%` }}\n                            ></div>\n                          </div>\n                          <span className=\"text-xs text-gray-500 mt-1\">\n                            {execution.progress}%\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {new Date(execution.startedAt).toLocaleString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {duration}s\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <button className=\"text-blue-600 hover:text-blue-900 mr-3\">\n                            View Details\n                          </button>\n                          {execution.status === 'running' && (\n                            <button className=\"text-red-600 hover:text-red-900\">\n                              Cancel\n                            </button>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Templates Tab */}\n      {activeTab === 'templates' && (\n        <div className=\"text-center py-12\">\n          <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Workflow Templates</h3>\n          <p className=\"text-gray-600 mb-4\">\n            Browse and use pre-built workflow templates\n          </p>\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n            Browse Templates\n          </button>\n        </div>\n      )}\n\n      {/* Analytics Tab */}\n      {activeTab === 'analytics' && (\n        <div className=\"text-center py-12\">\n          <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Workflow Analytics</h3>\n          <p className=\"text-gray-600 mb-4\">\n            View detailed analytics and performance metrics\n          </p>\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n            View Analytics\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n"