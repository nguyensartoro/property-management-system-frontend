import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  Button,\n  Chip,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  IconButton,\n  Tabs,\n  Tab,\n  Badge,\n  Tooltip,\n  CircularProgress,\n  Alert,\n  Snackbar,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Divider,\n  Avatar,\n  Paper,\n  Fab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Message as MessageIcon,\n  Send as SendIcon,\n  Announcement as AnnouncementIcon,\n  Emergency as EmergencyIcon,\n  Phone as PhoneIcon,\n  Email as EmailIcon,\n  Person as PersonIcon,\n  Schedule as ScheduleIcon,\n  Priority as PriorityIcon,\n  MarkEmailRead as MarkReadIcon,\n  Reply as ReplyIcon,\n  Add as AddIcon,\n  Close as CloseIcon,\n  Warning as WarningIcon,\n  Info as InfoIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  ExpandMore as ExpandMoreIcon,\n  Refresh as RefreshIcon,\n  FilterList as FilterIcon\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\n\ninterface TenantMessage {\n  id: string;\n  senderId: string;\n  recipientId: string;\n  conversationId: string;\n  subject?: string;\n  content: string;\n  messageType: 'general' | 'maintenance' | 'payment' | 'lease' | 'complaint' | 'emergency';\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  isRead: boolean;\n  readAt?: Date;\n  sentAt: Date;\n  attachments: string[];\n  senderInfo: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    role: string;\n  };\n  recipientInfo: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    role: string;\n  };\n}\n\ninterface TenantConversation {\n  id: string;\n  participants: string[];\n  lastMessage: {\n    id: string;\n    content: string;\n    sentAt: Date;\n    senderName: string;\n  };\n  unreadCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface TenantAnnouncement {\n  id: string;\n  title: string;\n  content: string;\n  category: string;\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  targetAudience: string[];\n  isRead: boolean;\n  readAt?: Date;\n  publishedAt: Date;\n  expiresAt?: Date;\n  attachments: string[];\n  authorInfo: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n  };\n}\n\ninterface EmergencyContact {\n  id: string;\n  name: string;\n  role: string;\n  phone: string;\n  email: string;\n  isAvailable24x7: boolean;\n  emergencyTypes: string[];\n  responseTime: string;\n  instructions: string;\n}\n\ninterface MessageStatistics {\n  totalMessages: number;\n  unreadMessages: number;\n  messagesByType: Record<string, number>;\n  messagesByPriority: Record<string, number>;\n  averageResponseTime: number;\n  totalConversations: number;\n  totalAnnouncements: number;\n  unreadAnnouncements: number;\n}\n\nconst TenantMessagingAnnouncements: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [messages, setMessages] = useState<TenantMessage[]>([]);\n  const [conversations, setConversations] = useState<TenantConversation[]>([]);\n  const [announcements, setAnnouncements] = useState<TenantAnnouncement[]>([]);\n  const [emergencyContacts, setEmergencyContacts] = useState<EmergencyContact[]>([]);\n  const [statistics, setStatistics] = useState<MessageStatistics | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [selectedConversation, setSelectedConversation] = useState<TenantConversation | null>(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [newMessageSubject, setNewMessageSubject] = useState('');\n  const [messageType, setMessageType] = useState<TenantMessage['messageType']>('general');\n  const [messagePriority, setMessagePriority] = useState<TenantMessage['priority']>('normal');\n  const [showNewMessageDialog, setShowNewMessageDialog] = useState(false);\n  const [showEmergencyDialog, setShowEmergencyDialog] = useState(false);\n  const [emergencyType, setEmergencyType] = useState('');\n  const [emergencySubject, setEmergencySubject] = useState('');\n  const [emergencyContent, setEmergencyContent] = useState('');\n  const [messageFilter, setMessageFilter] = useState({\n    messageType: '',\n    priority: '',\n    isRead: ''\n  });\n  const [announcementFilter, setAnnouncementFilter] = useState({\n    priority: '',\n    category: '',\n    isRead: ''\n  });\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' as 'success' | 'error' | 'info' | 'warning' });\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    loadData();\n  }, [activeTab]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([\n        loadConversations(),\n        loadAnnouncements(),\n        loadEmergencyContacts(),\n        loadStatistics()\n      ]);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadConversations = async () => {\n    try {\n      const response = await fetch('/api/tenant-document-communication/conversations', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load conversations');\n      }\n\n      const data = await response.json();\n      setConversations(data.data);\n    } catch (error) {\n      console.error('Error loading conversations:', error);\n    }\n  };\n\n  const loadMessages = async (conversationId: string) => {\n    try {\n      const queryParams = new URLSearchParams({\n        conversationId,\n        ...messageFilter\n      });\n\n      const response = await fetch(`/api/tenant-document-communication/messages?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load messages');\n      }\n\n      const data = await response.json();\n      setMessages(data.data.messages);\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    }\n  };\n\n  const loadAnnouncements = async () => {\n    try {\n      const queryParams = new URLSearchParams(announcementFilter);\n      const response = await fetch(`/api/tenant-document-communication/announcements?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load announcements');\n      }\n\n      const data = await response.json();\n      setAnnouncements(data.data.announcements);\n    } catch (error) {\n      console.error('Error loading announcements:', error);\n    }\n  };\n\n  const loadEmergencyContacts = async () => {\n    try {\n      const response = await fetch('/api/tenant-document-communication/emergency/contacts', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load emergency contacts');\n      }\n\n      const data = await response.json();\n      setEmergencyContacts(data.data);\n    } catch (error) {\n      console.error('Error loading emergency contacts:', error);\n    }\n  };\n\n  const loadStatistics = async () => {\n    try {\n      const response = await fetch('/api/tenant-document-communication/statistics', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load statistics');\n      }\n\n      const data = await response.json();\n      setStatistics(data.data);\n    } catch (error) {\n      console.error('Error loading statistics:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!newMessage.trim()) return;\n\n    try {\n      const response = await fetch('/api/tenant-document-communication/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          subject: newMessageSubject.trim() || undefined,\n          content: newMessage.trim(),\n          messageType,\n          priority: messagePriority,\n          conversationId: selectedConversation?.id\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      setNewMessage('');\n      setNewMessageSubject('');\n      setShowNewMessageDialog(false);\n      \n      if (selectedConversation) {\n        loadMessages(selectedConversation.id);\n      }\n      loadConversations();\n      loadStatistics();\n\n      setSnackbar({\n        open: true,\n        message: 'Message sent successfully',\n        severity: 'success'\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to send message',\n        severity: 'error'\n      });\n    }\n  };\n\n  const sendEmergencyMessage = async () => {\n    if (!emergencyContent.trim() || !emergencyType) return;\n\n    try {\n      const response = await fetch('/api/tenant-document-communication/emergency/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          subject: emergencySubject.trim(),\n          content: emergencyContent.trim(),\n          emergencyType\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send emergency message');\n      }\n\n      setEmergencySubject('');\n      setEmergencyContent('');\n      setEmergencyType('');\n      setShowEmergencyDialog(false);\n      \n      loadConversations();\n      loadStatistics();\n\n      setSnackbar({\n        open: true,\n        message: 'Emergency message sent successfully',\n        severity: 'success'\n      });\n    } catch (error) {\n      console.error('Error sending emergency message:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to send emergency message',\n        severity: 'error'\n      });\n    }\n  };\n\n  const markMessageAsRead = async (messageId: string) => {\n    try {\n      const response = await fetch(`/api/tenant-document-communication/messages/${messageId}/read`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to mark message as read');\n      }\n\n      if (selectedConversation) {\n        loadMessages(selectedConversation.id);\n      }\n      loadConversations();\n      loadStatistics();\n    } catch (error) {\n      console.error('Error marking message as read:', error);\n    }\n  };\n\n  const markAnnouncementAsRead = async (announcementId: string) => {\n    try {\n      const response = await fetch(`/api/tenant-document-communication/announcements/${announcementId}/read`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to mark announcement as read');\n      }\n\n      loadAnnouncements();\n      loadStatistics();\n    } catch (error) {\n      console.error('Error marking announcement as read:', error);\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const colors: Record<string, string> = {\n      low: '#4CAF50',\n      normal: '#2196F3',\n      high: '#FF9800',\n      urgent: '#F44336'\n    };\n    return colors[priority] || '#757575';\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return <ErrorIcon />;\n      case 'high':\n        return <WarningIcon />;\n      case 'normal':\n        return <InfoIcon />;\n      case 'low':\n        return <CheckCircleIcon />;\n      default:\n        return <InfoIcon />;\n    }\n  };\n\n  const getMessageTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      general: '#2196F3',\n      maintenance: '#FF9800',\n      payment: '#4CAF50',\n      lease: '#9C27B0',\n      complaint: '#F44336',\n      emergency: '#D32F2F'\n    };\n    return colors[type] || '#757575';\n  };\n\n  const TabPanel = ({ children, value, index }: { children: React.ReactNode; value: number; index: number }) => (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Messages & Announcements\n      </Typography>\n\n      {/* Statistics Overview */}\n      {statistics && (\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"primary\">\n                  {statistics.unreadMessages}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Unread Messages\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"secondary\">\n                  {statistics.unreadAnnouncements}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Unread Announcements\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\">\n                  {statistics.totalConversations}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Conversations\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\">\n                  {statistics.averageResponseTime}h\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Avg Response Time\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      <Card>\n        <Tabs\n          value={activeTab}\n          onChange={(e, newValue) => setActiveTab(newValue)}\n          sx={{ borderBottom: 1, borderColor: 'divider' }}\n        >\n          <Tab\n            label={\n              <Badge badgeContent={statistics?.unreadMessages || 0} color=\"primary\">\n                Messages\n              </Badge>\n            }\n            icon={<MessageIcon />}\n          />\n          <Tab\n            label={\n              <Badge badgeContent={statistics?.unreadAnnouncements || 0} color=\"secondary\">\n                Announcements\n              </Badge>\n            }\n            icon={<AnnouncementIcon />}\n          />\n          <Tab\n            label=\"Emergency Contacts\"\n            icon={<EmergencyIcon />}\n          />\n        </Tabs>\n\n        {/* Messages Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <Grid container spacing={3}>\n            {/* Conversations List */}\n            <Grid item xs={12} md={4}>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">\n                  Conversations\n                </Typography>\n                <IconButton onClick={loadConversations}>\n                  <RefreshIcon />\n                </IconButton>\n              </Box>\n              \n              <List>\n                {conversations.map((conversation) => (\n                  <ListItem\n                    key={conversation.id}\n                    button\n                    selected={selectedConversation?.id === conversation.id}\n                    onClick={() => {\n                      setSelectedConversation(conversation);\n                      loadMessages(conversation.id);\n                    }}\n                  >\n                    <ListItemIcon>\n                      <Avatar>\n                        <PersonIcon />\n                      </Avatar>\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography variant=\"subtitle2\">\n                            {conversation.lastMessage.senderName}\n                          </Typography>\n                          {conversation.unreadCount > 0 && (\n                            <Badge badgeContent={conversation.unreadCount} color=\"primary\" />\n                          )}\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          <Typography variant=\"body2\" noWrap>\n                            {conversation.lastMessage.content}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {format(new Date(conversation.lastMessage.sentAt), 'MMM dd, HH:mm')}\n                          </Typography>\n                        </Box>\n                      }\n                    />\n                  </ListItem>\n                ))}\n              </List>\n              \n              {conversations.length === 0 && (\n                <Alert severity=\"info\">\n                  No conversations yet. Start a new conversation!\n                </Alert>\n              )}\n            </Grid>\n\n            {/* Messages View */}\n            <Grid item xs={12} md={8}>\n              {selectedConversation ? (\n                <Box>\n                  <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                    <Typography variant=\"h6\">\n                      Conversation\n                    </Typography>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<FilterIcon />}\n                      size=\"small\"\n                    >\n                      Filter\n                    </Button>\n                  </Box>\n                  \n                  <Paper sx={{ height: 400, overflow: 'auto', p: 2, mb: 2 }}>\n                    {messages.map((message) => (\n                      <Box\n                        key={message.id}\n                        sx={{\n                          mb: 2,\n                          display: 'flex',\n                          justifyContent: message.senderId === 'current-user' ? 'flex-end' : 'flex-start'\n                        }}\n                      >\n                        <Paper\n                          sx={{\n                            p: 2,\n                            maxWidth: '70%',\n                            bgcolor: message.senderId === 'current-user' ? 'primary.light' : 'grey.100'\n                          }}\n                        >\n                          <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                            <Typography variant=\"subtitle2\">\n                              {message.senderInfo.firstName} {message.senderInfo.lastName}\n                            </Typography>\n                            <Chip\n                              size=\"small\"\n                              label={message.messageType}\n                              sx={{\n                                bgcolor: getMessageTypeColor(message.messageType),\n                                color: 'white',\n                                fontSize: '0.7rem'\n                              }}\n                            />\n                            <Chip\n                              size=\"small\"\n                              icon={getPriorityIcon(message.priority)}\n                              label={message.priority}\n                              sx={{\n                                bgcolor: getPriorityColor(message.priority),\n                                color: 'white',\n                                fontSize: '0.7rem'\n                              }}\n                            />\n                          </Box>\n                          \n                          {message.subject && (\n                            <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n                              {message.subject}\n                            </Typography>\n                          )}\n                          \n                          <Typography variant=\"body2\">\n                            {message.content}\n                          </Typography>\n                          \n                          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mt={1}>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {format(new Date(message.sentAt), 'MMM dd, yyyy HH:mm')}\n                            </Typography>\n                            \n                            {!message.isRead && message.senderId !== 'current-user' && (\n                              <IconButton\n                                size=\"small\"\n                                onClick={() => markMessageAsRead(message.id)}\n                              >\n                                <MarkReadIcon fontSize=\"small\" />\n                              </IconButton>\n                            )}\n                          </Box>\n                        </Paper>\n                      </Box>\n                    ))}\n                    <div ref={messagesEndRef} />\n                  </Paper>\n                  \n                  {/* Quick Reply */}\n                  <Box display=\"flex\" gap={1}>\n                    <TextField\n                      fullWidth\n                      placeholder=\"Type your message...\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendMessage()}\n                      multiline\n                      maxRows={3}\n                    />\n                    <Button\n                      variant=\"contained\"\n                      onClick={sendMessage}\n                      disabled={!newMessage.trim()}\n                      sx={{ minWidth: 'auto' }}\n                    >\n                      <SendIcon />\n                    </Button>\n                  </Box>\n                </Box>\n              ) : (\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={400}>\n                  <Typography variant=\"body1\" color=\"text.secondary\">\n                    Select a conversation to view messages\n                  </Typography>\n                </Box>\n              )}\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Announcements Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n            <Typography variant=\"h6\">\n              Announcements\n            </Typography>\n            <Box>\n              <Button\n                variant=\"outlined\"\n                startIcon={<FilterIcon />}\n                size=\"small\"\n                sx={{ mr: 1 }}\n              >\n                Filter\n              </Button>\n              <IconButton onClick={loadAnnouncements}>\n                <RefreshIcon />\n              </IconButton>\n            </Box>\n          </Box>\n          \n          {announcements.map((announcement) => (\n            <Accordion key={announcement.id}>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box display=\"flex\" alignItems=\"center\" gap={2} width=\"100%\">\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    {getPriorityIcon(announcement.priority)}\n                    <Typography variant=\"subtitle1\">\n                      {announcement.title}\n                    </Typography>\n                  </Box>\n                  \n                  <Box display=\"flex\" gap={1} ml=\"auto\">\n                    <Chip\n                      size=\"small\"\n                      label={announcement.category}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                    />\n                    <Chip\n                      size=\"small\"\n                      label={announcement.priority}\n                      sx={{\n                        bgcolor: getPriorityColor(announcement.priority),\n                        color: 'white'\n                      }}\n                    />\n                    {!announcement.isRead && (\n                      <Chip\n                        size=\"small\"\n                        label=\"New\"\n                        color=\"secondary\"\n                      />\n                    )}\n                  </Box>\n                </Box>\n              </AccordionSummary>\n              \n              <AccordionDetails>\n                <Box>\n                  <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                    {announcement.content}\n                  </Typography>\n                  \n                  <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Published by {announcement.authorInfo.firstName} {announcement.authorInfo.lastName} on {format(new Date(announcement.publishedAt), 'MMM dd, yyyy HH:mm')}\n                    </Typography>\n                    \n                    {!announcement.isRead && (\n                      <Button\n                        size=\"small\"\n                        onClick={() => markAnnouncementAsRead(announcement.id)}\n                        startIcon={<MarkReadIcon />}\n                      >\n                        Mark as Read\n                      </Button>\n                    )}\n                  </Box>\n                </Box>\n              </AccordionDetails>\n            </Accordion>\n          ))}\n          \n          {announcements.length === 0 && (\n            <Alert severity=\"info\">\n              No announcements available.\n            </Alert>\n          )}\n        </TabPanel>\n\n        {/* Emergency Contacts Tab */}\n        <TabPanel value={activeTab} index={2}>\n          <Typography variant=\"h6\" gutterBottom>\n            Emergency Contacts\n          </Typography>\n          \n          <Grid container spacing={3}>\n            {emergencyContacts.map((contact) => (\n              <Grid item xs={12} md={6} key={contact.id}>\n                <Card>\n                  <CardContent>\n                    <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n                      <Avatar>\n                        <PersonIcon />\n                      </Avatar>\n                      <Box>\n                        <Typography variant=\"h6\">\n                          {contact.name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {contact.role}\n                        </Typography>\n                      </Box>\n                      {contact.isAvailable24x7 && (\n                        <Chip\n                          size=\"small\"\n                          label=\"24/7\"\n                          color=\"success\"\n                          variant=\"outlined\"\n                        />\n                      )}\n                    </Box>\n                    \n                    <Box mb={2}>\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                        <PhoneIcon fontSize=\"small\" />\n                        <Typography variant=\"body2\">\n                          {contact.phone}\n                        </Typography>\n                      </Box>\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                        <EmailIcon fontSize=\"small\" />\n                        <Typography variant=\"body2\">\n                          {contact.email}\n                        </Typography>\n                      </Box>\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <ScheduleIcon fontSize=\"small\" />\n                        <Typography variant=\"body2\">\n                          Response time: {contact.responseTime}\n                        </Typography>\n                      </Box>\n                    </Box>\n                    \n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Emergency Types:\n                    </Typography>\n                    <Box mb={2}>\n                      {contact.emergencyTypes.map((type) => (\n                        <Chip\n                          key={type}\n                          size=\"small\"\n                          label={type}\n                          variant=\"outlined\"\n                          sx={{ mr: 0.5, mb: 0.5 }}\n                        />\n                      ))}\n                    </Box>\n                    \n                    {contact.instructions && (\n                      <Box>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          Instructions:\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {contact.instructions}\n                        </Typography>\n                      </Box>\n                    )}\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n          \n          {emergencyContacts.length === 0 && (\n            <Alert severity=\"warning\">\n              No emergency contacts available. Please contact your property manager.\n            </Alert>\n          )}\n        </TabPanel>\n      </Card>\n\n      {/* Floating Action Buttons */}\n      <Box sx={{ position: 'fixed', bottom: 16, right: 16 }}>\n        <Fab\n          color=\"primary\"\n          onClick={() => setShowNewMessageDialog(true)}\n          sx={{ mr: 1 }}\n        >\n          <AddIcon />\n        </Fab>\n        <Fab\n          color=\"error\"\n          onClick={() => setShowEmergencyDialog(true)}\n        >\n          <EmergencyIcon />\n        </Fab>\n      </Box>\n\n      {/* New Message Dialog */}\n      <Dialog\n        open={showNewMessageDialog}\n        onClose={() => setShowNewMessageDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          New Message\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Subject (Optional)\"\n                value={newMessageSubject}\n                onChange={(e) => setNewMessageSubject(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Message Type</InputLabel>\n                <Select\n                  value={messageType}\n                  onChange={(e) => setMessageType(e.target.value as any)}\n                >\n                  <MenuItem value=\"general\">General</MenuItem>\n                  <MenuItem value=\"maintenance\">Maintenance</MenuItem>\n                  <MenuItem value=\"payment\">Payment</MenuItem>\n                  <MenuItem value=\"lease\">Lease</MenuItem>\n                  <MenuItem value=\"complaint\">Complaint</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Priority</InputLabel>\n                <Select\n                  value={messagePriority}\n                  onChange={(e) => setMessagePriority(e.target.value as any)}\n                >\n                  <MenuItem value=\"low\">Low</MenuItem>\n                  <MenuItem value=\"normal\">Normal</MenuItem>\n                  <MenuItem value=\"high\">High</MenuItem>\n                  <MenuItem value=\"urgent\">Urgent</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={6}\n                label=\"Message\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                required\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowNewMessageDialog(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={sendMessage}\n            disabled={!newMessage.trim()}\n            startIcon={<SendIcon />}\n          >\n            Send Message\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Emergency Message Dialog */}\n      <Dialog\n        open={showEmergencyDialog}\n        onClose={() => setShowEmergencyDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle sx={{ bgcolor: 'error.main', color: 'white' }}>\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <EmergencyIcon />\n            Emergency Message\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Alert severity=\"warning\" sx={{ mt: 2, mb: 2 }}>\n            This will send an urgent message to emergency contacts and property management.\n          </Alert>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormControl fullWidth required>\n                <InputLabel>Emergency Type</InputLabel>\n                <Select\n                  value={emergencyType}\n                  onChange={(e) => setEmergencyType(e.target.value)}\n                >\n                  <MenuItem value=\"fire\">Fire</MenuItem>\n                  <MenuItem value=\"flood\">Flood</MenuItem>\n                  <MenuItem value=\"gas_leak\">Gas Leak</MenuItem>\n                  <MenuItem value=\"electrical\">Electrical Emergency</MenuItem>\n                  <MenuItem value=\"security\">Security Issue</MenuItem>\n                  <MenuItem value=\"medical\">Medical Emergency</MenuItem>\n                  <MenuItem value=\"other\">Other Emergency</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Subject\"\n                value={emergencySubject}\n                onChange={(e) => setEmergencySubject(e.target.value)}\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={6}\n                label=\"Emergency Details\"\n                value={emergencyContent}\n                onChange={(e) => setEmergencyContent(e.target.value)}\n                required\n                placeholder=\"Please describe the emergency situation in detail...\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowEmergencyDialog(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={sendEmergencyMessage}\n            disabled={!emergencyContent.trim() || !emergencyType}\n            startIcon={<EmergencyIcon />}\n          >\n            Send Emergency Message\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n          severity={snackbar.severity}\n          sx={{ width: '100%' }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default TenantMessagingAnnouncements;