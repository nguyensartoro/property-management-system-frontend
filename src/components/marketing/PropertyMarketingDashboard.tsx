import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Grid,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Tooltip,\n  CircularProgress,\n  Alert,\n  Snackbar,\n  LinearProgress,\n  Avatar,\n  Badge,\n  Divider\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  Share as ShareIcon,\n  Schedule as ScheduleIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  People as PeopleIcon,\n  Home as HomeIcon,\n  Assessment as AssessmentIcon,\n  Campaign as CampaignIcon,\n  CalendarToday as CalendarIcon,\n  Phone as PhoneIcon,\n  Email as EmailIcon,\n  Star as StarIcon,\n  CheckCircle as CheckCircleIcon,\n  Cancel as CancelIcon,\n  Refresh as RefreshIcon\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface PropertyListing {\n  id: string;\n  propertyId: string;\n  title: string;\n  description: string;\n  price: number;\n  bedrooms: number;\n  bathrooms: number;\n  squareFootage: number;\n  status: 'draft' | 'active' | 'paused' | 'rented' | 'archived';\n  platforms: string[];\n  createdAt: Date;\n  updatedAt: Date;\n  property: {\n    id: string;\n    address: string;\n    city: string;\n    state: string;\n    type: string;\n  };\n  leads: {\n    id: string;\n    status: string;\n    score: number;\n    createdAt: Date;\n  }[];\n}\n\ninterface Lead {\n  id: string;\n  propertyId: string;\n  source: string;\n  leadType: string;\n  contactInfo: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n  status: string;\n  score: number;\n  assignedTo?: string;\n  createdAt: Date;\n  property: {\n    id: string;\n    address: string;\n    city: string;\n    type: string;\n  };\n  assignedAgent?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  showings: {\n    id: string;\n    scheduledDate: Date;\n    status: string;\n    type: string;\n  }[];\n}\n\ninterface Showing {\n  id: string;\n  leadId: string;\n  propertyId: string;\n  scheduledDate: Date;\n  duration: number;\n  type: string;\n  status: string;\n  attendees: string[];\n  notes?: string;\n  feedback?: {\n    rating: number;\n    comments: string;\n    interests: string[];\n    concerns: string[];\n  };\n  property: {\n    id: string;\n    address: string;\n    city: string;\n  };\n  lead: {\n    id: string;\n    contactInfo: {\n      name: string;\n      email: string;\n      phone: string;\n    };\n    status: string;\n  };\n}\n\ninterface MarketingAnalytics {\n  listings: {\n    total: number;\n    active: number;\n    rented: number;\n    averageDaysOnMarket: number;\n  };\n  leads: {\n    total: number;\n    bySource: Record<string, number>;\n    byStatus: Record<string, number>;\n    conversionRate: number;\n    averageScore: number;\n  };\n  showings: {\n    total: number;\n    completed: number;\n    noShows: number;\n    averageRating: number;\n  };\n  platforms: {\n    performance: Record<string, {\n      listings: number;\n      leads: number;\n      conversions: number;\n      roi: number;\n    }>;\n  };\n  trends: {\n    leadsByMonth: Record<string, number>;\n    conversionsByMonth: Record<string, number>;\n    popularAmenities: Record<string, number>;\n  };\n}\n\nconst PropertyMarketingDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [listings, setListings] = useState<PropertyListing[]>([]);\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [showings, setShowings] = useState<Showing[]>([]);\n  const [analytics, setAnalytics] = useState<MarketingAnalytics | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [showCreateListingDialog, setShowCreateListingDialog] = useState(false);\n  const [showCreateLeadDialog, setShowCreateLeadDialog] = useState(false);\n  const [showScheduleShowingDialog, setShowScheduleShowingDialog] = useState(false);\n  const [selectedListing, setSelectedListing] = useState<PropertyListing | null>(null);\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' as 'success' | 'error' | 'info' | 'warning' });\n  const [filters, setFilters] = useState({\n    status: '',\n    source: '',\n    assignedTo: '',\n    dateRange: { start: '', end: '' }\n  });\n\n  useEffect(() => {\n    loadData();\n  }, [activeTab, filters]);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([\n        loadListings(),\n        loadLeads(),\n        loadShowings(),\n        loadAnalytics()\n      ]);\n    } catch (error) {\n      console.error('Error loading data:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to load data',\n        severity: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadListings = async () => {\n    try {\n      const queryParams = new URLSearchParams({\n        ...(filters.status && { status: filters.status }),\n        limit: '50'\n      });\n\n      const response = await fetch(`/api/property-marketing-automation/listings?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load listings');\n      }\n\n      const data = await response.json();\n      setListings(data.data.listings);\n    } catch (error) {\n      console.error('Error loading listings:', error);\n    }\n  };\n\n  const loadLeads = async () => {\n    try {\n      const queryParams = new URLSearchParams({\n        ...(filters.status && { status: filters.status }),\n        ...(filters.source && { source: filters.source }),\n        ...(filters.assignedTo && { assignedTo: filters.assignedTo }),\n        limit: '50'\n      });\n\n      const response = await fetch(`/api/property-marketing-automation/leads?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load leads');\n      }\n\n      const data = await response.json();\n      setLeads(data.data.leads);\n    } catch (error) {\n      console.error('Error loading leads:', error);\n    }\n  };\n\n  const loadShowings = async () => {\n    try {\n      const queryParams = new URLSearchParams({\n        ...(filters.dateRange.start && { startDate: filters.dateRange.start }),\n        ...(filters.dateRange.end && { endDate: filters.dateRange.end }),\n        limit: '50'\n      });\n\n      const response = await fetch(`/api/property-marketing-automation/showings?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load showings');\n      }\n\n      const data = await response.json();\n      setShowings(data.data.showings);\n    } catch (error) {\n      console.error('Error loading showings:', error);\n    }\n  };\n\n  const loadAnalytics = async () => {\n    try {\n      const queryParams = new URLSearchParams({\n        ...(filters.dateRange.start && { startDate: filters.dateRange.start }),\n        ...(filters.dateRange.end && { endDate: filters.dateRange.end })\n      });\n\n      const response = await fetch(`/api/property-marketing-automation/analytics?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load analytics');\n      }\n\n      const data = await response.json();\n      setAnalytics(data.data);\n    } catch (error) {\n      console.error('Error loading analytics:', error);\n    }\n  };\n\n  const distributeListingToPlatforms = async (listingId: string, platforms: string[]) => {\n    try {\n      const response = await fetch(`/api/property-marketing-automation/listings/${listingId}/distribute`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ platforms })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to distribute listing');\n      }\n\n      const data = await response.json();\n      \n      setSnackbar({\n        open: true,\n        message: `Listing distributed to ${data.data.success.length} platforms successfully`,\n        severity: 'success'\n      });\n\n      loadListings();\n    } catch (error) {\n      console.error('Error distributing listing:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to distribute listing',\n        severity: 'error'\n      });\n    }\n  };\n\n  const updateLeadStatus = async (leadId: string, status: string, notes?: string) => {\n    try {\n      const response = await fetch(`/api/property-marketing-automation/leads/${leadId}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ status, notes })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update lead status');\n      }\n\n      setSnackbar({\n        open: true,\n        message: 'Lead status updated successfully',\n        severity: 'success'\n      });\n\n      loadLeads();\n    } catch (error) {\n      console.error('Error updating lead status:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to update lead status',\n        severity: 'error'\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      draft: '#757575',\n      active: '#4CAF50',\n      paused: '#FF9800',\n      rented: '#2196F3',\n      archived: '#9E9E9E',\n      new: '#FF5722',\n      contacted: '#FF9800',\n      qualified: '#2196F3',\n      showing_scheduled: '#9C27B0',\n      application_submitted: '#3F51B5',\n      approved: '#4CAF50',\n      rejected: '#F44336',\n      converted: '#4CAF50'\n    };\n    return colors[status] || '#757575';\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return '#4CAF50';\n    if (score >= 60) return '#FF9800';\n    if (score >= 40) return '#FF5722';\n    return '#F44336';\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  const TabPanel = ({ children, value, index }: { children: React.ReactNode; value: number; index: number }) => (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n\n  // Prepare chart data\n  const leadTrendsData = analytics ? Object.entries(analytics.trends.leadsByMonth).map(([month, count]) => ({\n    month,\n    leads: count,\n    conversions: analytics.trends.conversionsByMonth[month] || 0\n  })) : [];\n\n  const leadSourceData = analytics ? Object.entries(analytics.leads.bySource).map(([source, count]) => ({\n    name: source,\n    value: count\n  })) : [];\n\n  const platformPerformanceData = analytics ? Object.entries(analytics.platforms.performance).map(([platform, data]) => ({\n    platform,\n    ...data\n  })) : [];\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\">\n          Property Marketing Automation\n        </Typography>\n        <Box>\n          <Button\n            variant=\"outlined\"\n            startIcon={<RefreshIcon />}\n            onClick={loadData}\n            disabled={loading}\n            sx={{ mr: 1 }}\n          >\n            Refresh\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setShowCreateListingDialog(true)}\n          >\n            Create Listing\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Analytics Overview Cards */}\n      {analytics && (\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"between\">\n                  <Box>\n                    <Typography variant=\"h4\" color=\"primary\">\n                      {analytics.listings.active}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Active Listings\n                    </Typography>\n                  </Box>\n                  <HomeIcon sx={{ fontSize: 40, color: 'primary.main' }} />\n                </Box>\n                <Box mt={1}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {analytics.listings.total} total • {analytics.listings.rented} rented\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"between\">\n                  <Box>\n                    <Typography variant=\"h4\" color=\"secondary\">\n                      {analytics.leads.total}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Total Leads\n                    </Typography>\n                  </Box>\n                  <PeopleIcon sx={{ fontSize: 40, color: 'secondary.main' }} />\n                </Box>\n                <Box mt={1}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {analytics.leads.conversionRate}% conversion rate\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"between\">\n                  <Box>\n                    <Typography variant=\"h4\">\n                      {analytics.showings.total}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Showings Scheduled\n                    </Typography>\n                  </Box>\n                  <CalendarIcon sx={{ fontSize: 40, color: 'info.main' }} />\n                </Box>\n                <Box mt={1}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {analytics.showings.completed} completed • {analytics.showings.averageRating}/5 avg rating\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"between\">\n                  <Box>\n                    <Typography variant=\"h4\">\n                      {analytics.listings.averageDaysOnMarket}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Avg Days on Market\n                    </Typography>\n                  </Box>\n                  <AssessmentIcon sx={{ fontSize: 40, color: 'warning.main' }} />\n                </Box>\n                <Box mt={1}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {analytics.leads.averageScore}/100 avg lead score\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Charts Section */}\n      {analytics && (\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} md={8}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Lead Trends & Conversions\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={leadTrendsData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"leads\" stroke=\"#8884d8\" name=\"Leads\" />\n                    <Line type=\"monotone\" dataKey=\"conversions\" stroke=\"#82ca9d\" name=\"Conversions\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Lead Sources\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={leadSourceData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {leadSourceData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Main Content Tabs */}\n      <Card>\n        <Tabs\n          value={activeTab}\n          onChange={(e, newValue) => setActiveTab(newValue)}\n          sx={{ borderBottom: 1, borderColor: 'divider' }}\n        >\n          <Tab label=\"Listings\" icon={<HomeIcon />} />\n          <Tab label=\"Leads\" icon={<PeopleIcon />} />\n          <Tab label=\"Showings\" icon={<CalendarIcon />} />\n          <Tab label=\"Analytics\" icon={<AssessmentIcon />} />\n        </Tabs>\n\n        {/* Listings Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n            <Typography variant=\"h6\">\n              Property Listings ({listings.length})\n            </Typography>\n            <Box>\n              <FormControl size=\"small\" sx={{ mr: 1, minWidth: 120 }}>\n                <InputLabel>Status</InputLabel>\n                <Select\n                  value={filters.status}\n                  onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n                >\n                  <MenuItem value=\"\">All</MenuItem>\n                  <MenuItem value=\"draft\">Draft</MenuItem>\n                  <MenuItem value=\"active\">Active</MenuItem>\n                  <MenuItem value=\"paused\">Paused</MenuItem>\n                  <MenuItem value=\"rented\">Rented</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </Box>\n          \n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Property</TableCell>\n                  <TableCell>Price</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Platforms</TableCell>\n                  <TableCell>Leads</TableCell>\n                  <TableCell>Created</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {listings.map((listing) => (\n                  <TableRow key={listing.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"subtitle2\">\n                          {listing.title}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {listing.property.address}, {listing.property.city}\n                        </Typography>\n                        <Box mt={0.5}>\n                          <Chip\n                            size=\"small\"\n                            label={`${listing.bedrooms}BR/${listing.bathrooms}BA`}\n                            variant=\"outlined\"\n                          />\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"subtitle2\">\n                        {formatCurrency(listing.price)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        size=\"small\"\n                        label={listing.status}\n                        sx={{\n                          bgcolor: getStatusColor(listing.status),\n                          color: 'white'\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" gap={0.5} flexWrap=\"wrap\">\n                        {listing.platforms.map((platform) => (\n                          <Chip\n                            key={platform}\n                            size=\"small\"\n                            label={platform}\n                            variant=\"outlined\"\n                          />\n                        ))}\n                        {listing.platforms.length === 0 && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Not distributed\n                          </Typography>\n                        )}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Badge badgeContent={listing.leads.length} color=\"primary\">\n                        <PeopleIcon />\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"caption\">\n                        {format(new Date(listing.createdAt), 'MMM dd, yyyy')}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" gap={1}>\n                        <Tooltip title=\"View Details\">\n                          <IconButton size=\"small\" onClick={() => setSelectedListing(listing)}>\n                            <ViewIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Distribute to Platforms\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => distributeListingToPlatforms(listing.id, ['zillow', 'apartments.com'])}\n                          >\n                            <ShareIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        {/* Leads Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n            <Typography variant=\"h6\">\n              Leads ({leads.length})\n            </Typography>\n            <Box>\n              <FormControl size=\"small\" sx={{ mr: 1, minWidth: 120 }}>\n                <InputLabel>Status</InputLabel>\n                <Select\n                  value={filters.status}\n                  onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n                >\n                  <MenuItem value=\"\">All</MenuItem>\n                  <MenuItem value=\"new\">New</MenuItem>\n                  <MenuItem value=\"contacted\">Contacted</MenuItem>\n                  <MenuItem value=\"qualified\">Qualified</MenuItem>\n                  <MenuItem value=\"converted\">Converted</MenuItem>\n                </Select>\n              </FormControl>\n              <Button\n                variant=\"contained\"\n                startIcon={<AddIcon />}\n                onClick={() => setShowCreateLeadDialog(true)}\n              >\n                Add Lead\n              </Button>\n            </Box>\n          </Box>\n          \n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Contact</TableCell>\n                  <TableCell>Property</TableCell>\n                  <TableCell>Source</TableCell>\n                  <TableCell>Score</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Assigned To</TableCell>\n                  <TableCell>Created</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {leads.map((lead) => (\n                  <TableRow key={lead.id}>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Avatar sx={{ width: 32, height: 32 }}>\n                          {lead.contactInfo.name.charAt(0)}\n                        </Avatar>\n                        <Box>\n                          <Typography variant=\"subtitle2\">\n                            {lead.contactInfo.name}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {lead.contactInfo.email}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"subtitle2\">\n                        {lead.property.address}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {lead.property.city} • {lead.property.type}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        size=\"small\"\n                        label={lead.source}\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={lead.score}\n                          sx={{\n                            width: 60,\n                            height: 8,\n                            borderRadius: 4,\n                            '& .MuiLinearProgress-bar': {\n                              bgcolor: getScoreColor(lead.score)\n                            }\n                          }}\n                        />\n                        <Typography variant=\"caption\">\n                          {lead.score}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        size=\"small\"\n                        label={lead.status.replace('_', ' ')}\n                        sx={{\n                          bgcolor: getStatusColor(lead.status),\n                          color: 'white'\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {lead.assignedAgent ? (\n                        <Typography variant=\"caption\">\n                          {lead.assignedAgent.firstName} {lead.assignedAgent.lastName}\n                        </Typography>\n                      ) : (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Unassigned\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"caption\">\n                        {format(new Date(lead.createdAt), 'MMM dd, yyyy')}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" gap={1}>\n                        <Tooltip title=\"Contact Lead\">\n                          <IconButton size=\"small\">\n                            <PhoneIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Schedule Showing\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => {\n                              setSelectedLead(lead);\n                              setShowScheduleShowingDialog(true);\n                            }}\n                          >\n                            <ScheduleIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Update Status\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => updateLeadStatus(lead.id, 'contacted')}\n                          >\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        {/* Showings Tab */}\n        <TabPanel value={activeTab} index={2}>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n            <Typography variant=\"h6\">\n              Showings ({showings.length})\n            </Typography>\n          </Box>\n          \n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date & Time</TableCell>\n                  <TableCell>Property</TableCell>\n                  <TableCell>Lead</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Rating</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {showings.map((showing) => (\n                  <TableRow key={showing.id}>\n                    <TableCell>\n                      <Typography variant=\"subtitle2\">\n                        {format(new Date(showing.scheduledDate), 'MMM dd, yyyy')}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {format(new Date(showing.scheduledDate), 'HH:mm')} ({showing.duration}min)\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"subtitle2\">\n                        {showing.property.address}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {showing.property.city}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"subtitle2\">\n                        {showing.lead.contactInfo.name}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {showing.lead.contactInfo.email}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        size=\"small\"\n                        label={showing.type.replace('_', ' ')}\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        size=\"small\"\n                        label={showing.status}\n                        sx={{\n                          bgcolor: getStatusColor(showing.status),\n                          color: 'white'\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {showing.feedback?.rating ? (\n                        <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                          <StarIcon sx={{ color: '#FFD700', fontSize: 16 }} />\n                          <Typography variant=\"caption\">\n                            {showing.feedback.rating}/5\n                          </Typography>\n                        </Box>\n                      ) : (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          No rating\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" gap={1}>\n                        <Tooltip title=\"Mark Completed\">\n                          <IconButton size=\"small\">\n                            <CheckCircleIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Cancel Showing\">\n                          <IconButton size=\"small\">\n                            <CancelIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        {/* Analytics Tab */}\n        <TabPanel value={activeTab} index={3}>\n          {analytics && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Platform Performance\n                    </Typography>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={platformPerformanceData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"platform\" />\n                        <YAxis />\n                        <RechartsTooltip />\n                        <Legend />\n                        <Bar dataKey=\"leads\" fill=\"#8884d8\" name=\"Leads\" />\n                        <Bar dataKey=\"conversions\" fill=\"#82ca9d\" name=\"Conversions\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Popular Amenities\n                    </Typography>\n                    <Box>\n                      {Object.entries(analytics.trends.popularAmenities)\n                        .sort(([,a], [,b]) => b - a)\n                        .slice(0, 10)\n                        .map(([amenity, count]) => (\n                          <Box key={amenity} display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={1}>\n                            <Typography variant=\"body2\">\n                              {amenity}\n                            </Typography>\n                            <Chip size=\"small\" label={count} />\n                          </Box>\n                        ))\n                      }\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          )}\n        </TabPanel>\n      </Card>\n\n      {/* Loading Overlay */}\n      {loading && (\n        <Box\n          position=\"fixed\"\n          top={0}\n          left={0}\n          right={0}\n          bottom={0}\n          bgcolor=\"rgba(0,0,0,0.5)\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          zIndex={9999}\n        >\n          <CircularProgress />\n        </Box>\n      )}\n\n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n          severity={snackbar.severity}\n          sx={{ width: '100%' }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default PropertyMarketingDashboard;