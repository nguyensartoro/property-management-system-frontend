import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Camera,\n  Upload,\n  X,\n  Check,\n  AlertCircle,\n  Eye,\n  EyeOff,\n  Calendar,\n  Clock,\n  MapPin,\n  Phone,\n  Mail,\n  DollarSign,\n  Hash,\n  User,\n  Home,\n  FileText,\n} from 'lucide-react';\n\ninterface MobileInputProps {\n  label: string;\n  type?: 'text' | 'email' | 'tel' | 'number' | 'password' | 'date' | 'time' | 'datetime-local' | 'textarea';\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  required?: boolean;\n  error?: string;\n  disabled?: boolean;\n  autoComplete?: string;\n  pattern?: string;\n  min?: string | number;\n  max?: string | number;\n  step?: string | number;\n  rows?: number;\n  maxLength?: number;\n  icon?: React.ReactNode;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  className?: string;\n}\n\nexport const MobileInput: React.FC<MobileInputProps> = ({\n  label,\n  type = 'text',\n  value,\n  onChange,\n  placeholder,\n  required = false,\n  error,\n  disabled = false,\n  autoComplete,\n  pattern,\n  min,\n  max,\n  step,\n  rows = 3,\n  maxLength,\n  icon,\n  onFocus,\n  onBlur,\n  className = '',\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    onFocus?.();\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur?.();\n  };\n\n  const getInputMode = () => {\n    switch (type) {\n      case 'email':\n        return 'email';\n      case 'tel':\n        return 'tel';\n      case 'number':\n        return 'numeric';\n      default:\n        return 'text';\n    }\n  };\n\n  const getKeyboardType = () => {\n    switch (type) {\n      case 'email':\n        return 'email-address';\n      case 'tel':\n        return 'phone-pad';\n      case 'number':\n        return 'numeric';\n      default:\n        return 'default';\n    }\n  };\n\n  const inputClasses = `\n    w-full px-4 py-3 text-base border-2 rounded-lg transition-all duration-200\n    ${isFocused ? 'border-blue-500 ring-2 ring-blue-200' : 'border-gray-300'}\n    ${error ? 'border-red-500 ring-2 ring-red-200' : ''}\n    ${disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : 'bg-white'}\n    ${icon ? 'pl-12' : ''}\n    ${type === 'password' ? 'pr-12' : ''}\n    focus:outline-none\n    placeholder-gray-400\n    text-gray-900\n    min-h-[48px]\n    ${className}\n  `;\n\n  const labelClasses = `\n    block text-sm font-medium mb-2 transition-colors duration-200\n    ${error ? 'text-red-600' : isFocused ? 'text-blue-600' : 'text-gray-700'}\n    ${required ? \"after:content-['*'] after:text-red-500 after:ml-1\" : ''}\n  `;\n\n  const renderInput = () => {\n    const commonProps = {\n      ref: inputRef as any,\n      value,\n      onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => onChange(e.target.value),\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      placeholder,\n      required,\n      disabled,\n      autoComplete,\n      pattern,\n      min,\n      max,\n      step,\n      maxLength,\n      className: inputClasses,\n      inputMode: getInputMode() as any,\n      'data-keyboard-type': getKeyboardType(),\n    };\n\n    if (type === 'textarea') {\n      return (\n        <textarea\n          {...commonProps}\n          rows={rows}\n          style={{ resize: 'vertical', minHeight: '48px' }}\n        />\n      );\n    }\n\n    return (\n      <input\n        {...commonProps}\n        type={type === 'password' && showPassword ? 'text' : type}\n      />\n    );\n  };\n\n  return (\n    <div className=\"mb-4\">\n      <label className={labelClasses}>\n        {label}\n      </label>\n      \n      <div className=\"relative\">\n        {icon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\n            {icon}\n          </div>\n        )}\n        \n        {renderInput()}\n        \n        {type === 'password' && (\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword(!showPassword)}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n            tabIndex={-1}\n          >\n            {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n          </button>\n        )}\n      </div>\n      \n      {error && (\n        <div className=\"mt-2 flex items-center text-red-600 text-sm\">\n          <AlertCircle size={16} className=\"mr-1 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface MobileSelectProps {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: Array<{ value: string; label: string; disabled?: boolean }>;\n  placeholder?: string;\n  required?: boolean;\n  error?: string;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  className?: string;\n}\n\nexport const MobileSelect: React.FC<MobileSelectProps> = ({\n  label,\n  value,\n  onChange,\n  options,\n  placeholder = 'Select an option',\n  required = false,\n  error,\n  disabled = false,\n  icon,\n  className = '',\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const selectClasses = `\n    w-full px-4 py-3 text-base border-2 rounded-lg transition-all duration-200 appearance-none\n    ${isFocused ? 'border-blue-500 ring-2 ring-blue-200' : 'border-gray-300'}\n    ${error ? 'border-red-500 ring-2 ring-red-200' : ''}\n    ${disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : 'bg-white'}\n    ${icon ? 'pl-12' : ''}\n    focus:outline-none\n    text-gray-900\n    min-h-[48px]\n    ${className}\n  `;\n\n  const labelClasses = `\n    block text-sm font-medium mb-2 transition-colors duration-200\n    ${error ? 'text-red-600' : isFocused ? 'text-blue-600' : 'text-gray-700'}\n    ${required ? \"after:content-['*'] after:text-red-500 after:ml-1\" : ''}\n  `;\n\n  return (\n    <div className=\"mb-4\">\n      <label className={labelClasses}>\n        {label}\n      </label>\n      \n      <div className=\"relative\">\n        {icon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\">\n            {icon}\n          </div>\n        )}\n        \n        <select\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          required={required}\n          disabled={disabled}\n          className={selectClasses}\n        >\n          {placeholder && (\n            <option value=\"\" disabled>\n              {placeholder}\n            </option>\n          )}\n          {options.map((option) => (\n            <option\n              key={option.value}\n              value={option.value}\n              disabled={option.disabled}\n            >\n              {option.label}\n            </option>\n          ))}\n        </select>\n        \n        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none\">\n          <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </div>\n      </div>\n      \n      {error && (\n        <div className=\"mt-2 flex items-center text-red-600 text-sm\">\n          <AlertCircle size={16} className=\"mr-1 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface MobileCheckboxProps {\n  label: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  disabled?: boolean;\n  error?: string;\n  description?: string;\n  className?: string;\n}\n\nexport const MobileCheckbox: React.FC<MobileCheckboxProps> = ({\n  label,\n  checked,\n  onChange,\n  disabled = false,\n  error,\n  description,\n  className = '',\n}) => {\n  return (\n    <div className={`mb-4 ${className}`}>\n      <label className=\"flex items-start space-x-3 cursor-pointer\">\n        <div className=\"relative flex-shrink-0 mt-1\">\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            onChange={(e) => onChange(e.target.checked)}\n            disabled={disabled}\n            className=\"sr-only\"\n          />\n          <div\n            className={`\n              w-6 h-6 border-2 rounded transition-all duration-200 flex items-center justify-center\n              ${checked ? 'bg-blue-500 border-blue-500' : 'bg-white border-gray-300'}\n              ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n              ${error ? 'border-red-500' : ''}\n            `}\n          >\n            {checked && (\n              <Check size={16} className=\"text-white\" />\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex-1 min-w-0\">\n          <div className={`text-base font-medium ${disabled ? 'text-gray-500' : 'text-gray-900'}`}>\n            {label}\n          </div>\n          {description && (\n            <div className={`text-sm mt-1 ${disabled ? 'text-gray-400' : 'text-gray-600'}`}>\n              {description}\n            </div>\n          )}\n        </div>\n      </label>\n      \n      {error && (\n        <div className=\"mt-2 flex items-center text-red-600 text-sm\">\n          <AlertCircle size={16} className=\"mr-1 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface MobileRadioGroupProps {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: Array<{ value: string; label: string; description?: string; disabled?: boolean }>;\n  required?: boolean;\n  error?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const MobileRadioGroup: React.FC<MobileRadioGroupProps> = ({\n  label,\n  value,\n  onChange,\n  options,\n  required = false,\n  error,\n  disabled = false,\n  className = '',\n}) => {\n  const labelClasses = `\n    block text-sm font-medium mb-3 transition-colors duration-200\n    ${error ? 'text-red-600' : 'text-gray-700'}\n    ${required ? \"after:content-['*'] after:text-red-500 after:ml-1\" : ''}\n  `;\n\n  return (\n    <div className={`mb-4 ${className}`}>\n      <div className={labelClasses}>\n        {label}\n      </div>\n      \n      <div className=\"space-y-3\">\n        {options.map((option) => (\n          <label key={option.value} className=\"flex items-start space-x-3 cursor-pointer\">\n            <div className=\"relative flex-shrink-0 mt-1\">\n              <input\n                type=\"radio\"\n                name={label}\n                value={option.value}\n                checked={value === option.value}\n                onChange={(e) => onChange(e.target.value)}\n                disabled={disabled || option.disabled}\n                className=\"sr-only\"\n              />\n              <div\n                className={`\n                  w-6 h-6 border-2 rounded-full transition-all duration-200 flex items-center justify-center\n                  ${value === option.value ? 'border-blue-500' : 'border-gray-300'}\n                  ${disabled || option.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                  ${error ? 'border-red-500' : ''}\n                `}\n              >\n                {value === option.value && (\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className={`text-base font-medium ${\n                disabled || option.disabled ? 'text-gray-500' : 'text-gray-900'\n              }`}>\n                {option.label}\n              </div>\n              {option.description && (\n                <div className={`text-sm mt-1 ${\n                  disabled || option.disabled ? 'text-gray-400' : 'text-gray-600'\n                }`}>\n                  {option.description}\n                </div>\n              )}\n            </div>\n          </label>\n        ))}\n      </div>\n      \n      {error && (\n        <div className=\"mt-2 flex items-center text-red-600 text-sm\">\n          <AlertCircle size={16} className=\"mr-1 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface MobileFileUploadProps {\n  label: string;\n  accept?: string;\n  multiple?: boolean;\n  maxSize?: number; // in MB\n  onFilesSelected: (files: File[]) => void;\n  onCameraCapture?: (file: File) => void;\n  required?: boolean;\n  error?: string;\n  disabled?: boolean;\n  preview?: boolean;\n  existingFiles?: Array<{ name: string; url: string; size?: number }>;\n  onRemoveFile?: (index: number) => void;\n  className?: string;\n}\n\nexport const MobileFileUpload: React.FC<MobileFileUploadProps> = ({\n  label,\n  accept = 'image/*',\n  multiple = false,\n  maxSize = 10,\n  onFilesSelected,\n  onCameraCapture,\n  required = false,\n  error,\n  disabled = false,\n  preview = true,\n  existingFiles = [],\n  onRemoveFile,\n  className = '',\n}) => {\n  const [dragOver, setDragOver] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const cameraInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files) return;\n\n    const fileArray = Array.from(files);\n    const validFiles = fileArray.filter(file => {\n      if (file.size > maxSize * 1024 * 1024) {\n        alert(`File ${file.name} is too large. Maximum size is ${maxSize}MB.`);\n        return false;\n      }\n      return true;\n    });\n\n    setSelectedFiles(prev => multiple ? [...prev, ...validFiles] : validFiles);\n    onFilesSelected(validFiles);\n  };\n\n  const handleCameraCapture = (files: FileList | null) => {\n    if (!files || files.length === 0) return;\n    \n    const file = files[0];\n    if (file.size > maxSize * 1024 * 1024) {\n      alert(`File is too large. Maximum size is ${maxSize}MB.`);\n      return;\n    }\n\n    onCameraCapture?.(file);\n    setSelectedFiles(prev => multiple ? [...prev, file] : [file]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n    onRemoveFile?.(index);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const labelClasses = `\n    block text-sm font-medium mb-2 transition-colors duration-200\n    ${error ? 'text-red-600' : 'text-gray-700'}\n    ${required ? \"after:content-['*'] after:text-red-500 after:ml-1\" : ''}\n  `;\n\n  const dropZoneClasses = `\n    border-2 border-dashed rounded-lg p-6 text-center transition-all duration-200 cursor-pointer\n    ${dragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'}\n    ${error ? 'border-red-500 bg-red-50' : ''}\n    ${disabled ? 'opacity-50 cursor-not-allowed bg-gray-50' : ''}\n    min-h-[120px] flex flex-col items-center justify-center\n  `;\n\n  return (\n    <div className={`mb-4 ${className}`}>\n      <div className={labelClasses}>\n        {label}\n      </div>\n      \n      <div\n        className={dropZoneClasses}\n        onDragOver={(e) => {\n          e.preventDefault();\n          if (!disabled) setDragOver(true);\n        }}\n        onDragLeave={() => setDragOver(false)}\n        onDrop={(e) => {\n          e.preventDefault();\n          setDragOver(false);\n          if (!disabled) handleFileSelect(e.dataTransfer.files);\n        }}\n        onClick={() => !disabled && fileInputRef.current?.click()}\n      >\n        <Upload size={32} className={`mb-2 ${dragOver ? 'text-blue-500' : 'text-gray-400'}`} />\n        <p className=\"text-base font-medium text-gray-700 mb-1\">\n          {dragOver ? 'Drop files here' : 'Tap to select files'}\n        </p>\n        <p className=\"text-sm text-gray-500\">\n          or drag and drop • Max {maxSize}MB\n        </p>\n        \n        {accept.includes('image') && onCameraCapture && (\n          <button\n            type=\"button\"\n            onClick={(e) => {\n              e.stopPropagation();\n              cameraInputRef.current?.click();\n            }}\n            className=\"mt-3 inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n            disabled={disabled}\n          >\n            <Camera size={16} className=\"mr-2\" />\n            Take Photo\n          </button>\n        )}\n      </div>\n      \n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={accept}\n        multiple={multiple}\n        onChange={(e) => handleFileSelect(e.target.files)}\n        className=\"hidden\"\n        disabled={disabled}\n      />\n      \n      {accept.includes('image') && onCameraCapture && (\n        <input\n          ref={cameraInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          capture=\"environment\"\n          onChange={(e) => handleCameraCapture(e.target.files)}\n          className=\"hidden\"\n          disabled={disabled}\n        />\n      )}\n      \n      {/* File Preview */}\n      {preview && (selectedFiles.length > 0 || existingFiles.length > 0) && (\n        <div className=\"mt-4 space-y-2\">\n          {existingFiles.map((file, index) => (\n            <div key={`existing-${index}`} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <FileText size={20} className=\"text-gray-400\" />\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">{file.name}</p>\n                  {file.size && (\n                    <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n                  )}\n                </div>\n              </div>\n              {onRemoveFile && (\n                <button\n                  type=\"button\"\n                  onClick={() => onRemoveFile(index)}\n                  className=\"p-1 text-red-500 hover:text-red-700 transition-colors\"\n                >\n                  <X size={16} />\n                </button>\n              )}\n            </div>\n          ))}\n          \n          {selectedFiles.map((file, index) => (\n            <div key={`selected-${index}`} className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                {file.type.startsWith('image/') ? (\n                  <img\n                    src={URL.createObjectURL(file)}\n                    alt={file.name}\n                    className=\"w-10 h-10 object-cover rounded\"\n                  />\n                ) : (\n                  <FileText size={20} className=\"text-blue-500\" />\n                )}\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">{file.name}</p>\n                  <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n                </div>\n              </div>\n              <button\n                type=\"button\"\n                onClick={() => removeFile(index)}\n                className=\"p-1 text-red-500 hover:text-red-700 transition-colors\"\n              >\n                <X size={16} />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"mt-2 flex items-center text-red-600 text-sm\">\n          <AlertCircle size={16} className=\"mr-1 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Form validation utilities\nexport const FormValidation = {\n  required: (value: string) => {\n    return value.trim() === '' ? 'This field is required' : null;\n  },\n  \n  email: (value: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return !emailRegex.test(value) ? 'Please enter a valid email address' : null;\n  },\n  \n  phone: (value: string) => {\n    const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n    return !phoneRegex.test(value.replace(/[\\s\\-\\(\\)]/g, '')) ? 'Please enter a valid phone number' : null;\n  },\n  \n  minLength: (min: number) => (value: string) => {\n    return value.length < min ? `Must be at least ${min} characters` : null;\n  },\n  \n  maxLength: (max: number) => (value: string) => {\n    return value.length > max ? `Must be no more than ${max} characters` : null;\n  },\n  \n  number: (value: string) => {\n    return isNaN(Number(value)) ? 'Please enter a valid number' : null;\n  },\n  \n  positiveNumber: (value: string) => {\n    const num = Number(value);\n    return isNaN(num) || num <= 0 ? 'Please enter a positive number' : null;\n  },\n  \n  currency: (value: string) => {\n    const currencyRegex = /^\\d+(\\.\\d{1,2})?$/;\n    return !currencyRegex.test(value) ? 'Please enter a valid amount (e.g., 123.45)' : null;\n  },\n};\n\n// Common form field configurations\nexport const FormFieldConfigs = {\n  name: {\n    icon: <User size={20} />,\n    autoComplete: 'name',\n    placeholder: 'Enter your full name',\n  },\n  \n  email: {\n    type: 'email' as const,\n    icon: <Mail size={20} />,\n    autoComplete: 'email',\n    placeholder: 'Enter your email address',\n  },\n  \n  phone: {\n    type: 'tel' as const,\n    icon: <Phone size={20} />,\n    autoComplete: 'tel',\n    placeholder: 'Enter your phone number',\n  },\n  \n  address: {\n    icon: <MapPin size={20} />,\n    autoComplete: 'address-line1',\n    placeholder: 'Enter your address',\n  },\n  \n  rent: {\n    type: 'number' as const,\n    icon: <DollarSign size={20} />,\n    placeholder: 'Enter rent amount',\n    step: '0.01',\n    min: '0',\n  },\n  \n  unitNumber: {\n    icon: <Hash size={20} />,\n    placeholder: 'Enter unit number',\n  },\n  \n  propertyName: {\n    icon: <Home size={20} />,\n    placeholder: 'Enter property name',\n  },\n  \n  date: {\n    type: 'date' as const,\n    icon: <Calendar size={20} />,\n  },\n  \n  time: {\n    type: 'time' as const,\n    icon: <Clock size={20} />,\n  },\n  \n  description: {\n    type: 'textarea' as const,\n    rows: 4,\n    placeholder: 'Enter description...',\n  },\n};\n"